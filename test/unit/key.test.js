/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

/*
 * Copyright 2019, Joyent, Inc.
 */

/*
 * Unit tests for token endpoints
 */

'use strict';

var h = require('./helpers');
var mod_key = require('../lib/key');
var mod_server = require('../lib/server');
var test = require('tape');

var KBMAPI;
var MORAY;

// Values here were generated by reading /dev/random. Any resemblance to
// actual tokens, living or dead, is purely coincidential.  Sorted by GUID

var KEYS = [
    {
        cn_uuid: '827b3291-23a7-edea-8720-e2ef26cc822f',
        encryptKey: '29c330810139829a2f48c57cdb5d51ee'
    },
    {
        cn_uuid: '4939c713-66c3-ebd6-cd42-a129cc18b317',
        encryptKey: 'd0f590d1fdc98ef5bdd2461322d19db4'
    }
];

test('Initial setup', function tInitialSetup(t) {
    h.reset();

    t.test('Create client and server', function tCreateClientServer(t2) {
        h.createClientAndServer(function (err, res, moray) {
            KBMAPI = res;
            MORAY = moray;
            t2.ifError(err, 'server creation');
            t2.ok(KBMAPI, 'client');
            t2.ok(MORAY, 'moray');
            t2.end();
        });
    });

    t.test('Create keys', function tCreateTokens(t2) {
        KEYS.forEach(function eachKey(key) {
            t2.test('Create key for CN ' + key.cn_uuid, function doCreate(t3) {
                mod_key.create(t3, {
                    params: key,
                    exp: key
                });
            });
        });
        t2.end();
    });

    t.test('Get key', function tGetToken(t2) {
        var key = KEYS[0];

        mod_key.get(t2, {
            params: {
                cn_uuid: key.cn_uuid
            },
            exp: {
                cn_uuid: key.cn_uuid,
                encryptKey: key.encryptKey
            }
        });
    });

    t.test('Delete Key', function tDeleteKey(t2) {
        mod_key.delete(t2, {
            params: {
                cn_uuid: KEYS[0].cn_uuid
            },
            exp: {}
        });
    });

    t.test('Lookup deleted key', function tGetDeletedKey(t2) {
        mod_key.get(t2, {
            params: {
                cn_uuid: KEYS[0].cn_uuid
            },
            expCode: 404,
            expErr: {
                code: 'ResourceNotFound',
                message: 'cn key not found'
            }
        });
    });
});

test('Stop server', mod_server.close);
