/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

/*
 * Copyright 2019 Joyent, Inc.
 */

/*
 * Unit tests for token endpoints
 */

'use strict';

const crypto = require('crypto');
const fs = require('fs');
const path = require('path');
const util = require('util');

const h = require('./helpers');
const mod_jsprim = require('jsprim');
const mod_token = require('../lib/token');
const mod_server = require('../lib/server');
const test = require('tape');


var KBMAPI;
var MORAY;
var CLIENT;

// Values here were generated by reading /dev/random. Any resemblance to
// actual tokens, living or dead, is purely coincidential.  Sorted by GUID
var TOKENS = [
    {
        guid: '75CA077A14C5E45037D7A0740D5602A5',
        pin: '12345',
        serial: 'abcd12345',
        model: 'ACME insta-token model 1',
        cn_uuid: '00000000-0000-0000-0000-000000000001',
        pubkeys: {
            /* eslint-disable max-len */
            '9a': 'ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBC7NhJvp9c5XMOkPLfDvsHZytnY4cWduFRF4KlQIr7LNQnbw50NNlbyhXHzD85KjcztyMoqn9w4XuHdJh4O1lH4=',
            '9d': 'ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBD+uKKyn5tBNziW21yPt/0FE2LD4l1cWgzONYjn3n8BzSNo/aTzJccki7Q/Lyk7dM8yZLAc/5V/U/QHbLTpexBg=',
            '9e': fs.readFileSync(path.resolve(__dirname, '../one_token_test_edcsa.pub'), 'ascii')
            /* eslint-enable max-len */
        }
    },
    {
        guid: 'DDA81AA0DB3528479AB6D2AC75624E5E',
        pin: '54321',
        serial: 'deadbeef123',
        model: 'ACME insta-token model 1',
        cn_uuid: '00000000-0000-0000-0000-000000000002',
        pubkeys: {
            /* eslint-disable max-len */
            '9a': 'ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEv/A+0Gc6X5fADdewP1+VJvqgq+ANVCA9rLHxvVkbqbDeFoUBFIPBqKBmpw6kWMb4J6B+4oQTp936+CgdJySz8=',
            '9d': 'ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFD+ANQt5yC9EvPa5V7OfFpscRDbN9e+ghc0g+u6wVA4CQw1+/s4NRUybf/HIOveYHfpiP9ai5C6HAZYQE28rNY=',
            '9e': fs.readFileSync(path.resolve(__dirname, '../another_token_test_edcsa.pub'), 'ascii')
            /* eslint-enable max-len */
        }
    }
];

var OTHER_TOKEN = {
    model: 'Yubico Yubikey 4',
    serial: 6324923,
    cn_uuid: '00000000-0000-0000-0000-000000000002',
    guid: '1FFCFCBF0BE44E30975A550069B9B741',
    pin: '424242',
    pubkeys: {
            /* eslint-disable max-len */
            '9a': 'ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEv/A+0Gc6X5fADdewP1+VJvqgq+ANVCA9rLHxvVkbqbDeFoUBFIPBqKBmpw6kWMb4J6B+4oQTp936+CgdJySz8=',
            '9d': 'ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFD+ANQt5yC9EvPa5V7OfFpscRDbN9e+ghc0g+u6wVA4CQw1+/s4NRUybf/HIOveYHfpiP9ai5C6HAZYQE28rNY=',
            '9e': fs.readFileSync(path.resolve(__dirname, '../another_token_recovery_edcsa.pub'), 'ascii')
            /* eslint-enable max-len */
    }
};

var RECOVERY_TOKEN;

var privKeys = [
    fs.readFileSync(path.resolve(__dirname, '../one_token_test_edcsa'),
        'ascii'),
    fs.readFileSync(path.resolve(__dirname, '../another_token_test_edcsa'),
        'ascii')
];

test('Initial setup', function tInitialSetup(suite) {
    h.reset();

    suite.test('Create client and server', function tCreateClientServer(t) {
        h.createClientAndServer(function (err, client, moray, server) {
            KBMAPI = server;
            MORAY = moray;
            CLIENT = client;
            t.ifError(err, 'server creation');
            t.ok(KBMAPI, 'server');
            t.ok(MORAY, 'moray');
            t.ok(CLIENT, 'client');
            t.end();
        });
    });

    suite.test('Create token w/o cn_uuid', function tCreateWOCNUuid(t) {
        var tk = mod_jsprim.deepCopy(TOKENS[0]);
        delete tk.cn_uuid;
        mod_token.create(t, {
            params: tk,
            expErr: {
                code: 'InvalidParameters',
                message: 'Missing parameters',
                errors: [ {
                    field: 'cn_uuid',
                    code: 'MissingParameter',
                    message: 'Missing parameter'
                } ]
            },
            expCode: 422,
            privkey: privKeys[0]
        });
    });

    suite.test('Create token w/o pin', function tCreateWOPin(t) {
        var tk = mod_jsprim.deepCopy(TOKENS[0]);
        delete tk.pin;
        mod_token.create(t, {
            params: tk,
            expErr: {
                code: 'InvalidParameters',
                message: 'Missing parameters',
                errors: [ {
                    field: 'pin',
                    code: 'MissingParameter',
                    message: 'Missing parameter'
                } ]
            },
            expCode: 422,
            privkey: privKeys[0]
        });
    });

    suite.test('Create token invalid pubkeys', function tCreateInvalidKeys(t) {
        var tk = mod_jsprim.deepCopy(TOKENS[0]);
        tk.pubkeys['9a'] = null;
        mod_token.create(t, {
            params: tk,
            expErr: {
                code: 'InvalidParameters',
                message: 'Invalid parameters',
                errors: [ {
                    field: 'pubkeys.9a',
                    code: 'InvalidParameter',
                    message: 'must be a string'
                } ]
            },
            expCode: 422,
            privkey: privKeys[0]
        });
    });

    suite.test('Create tokens', function tCreateTokens(t) {
        function createAToken(aToken, aKey) {
            t.test('Create token GUID ' + aToken.guid, function doCreate(t3) {
                mod_token.create(t3, {
                    params: aToken,
                    exp: aToken,
                    privkey: aKey
                });
            });
        }
        var i;
        for (i = 0; i < TOKENS.length; i += 1) {
            createAToken(TOKENS[i], privKeys[i]);
        }
        t.end();
    });

    suite.test('Create token with invalid privkey', function privKeyErr(t) {
        var tk = mod_jsprim.deepCopy(TOKENS[0]);
        mod_token.create(t, {
            params: tk,
            expErr: {
                code: 'InvalidCredentials',
                message: 'Invalid authorization credentials supplied'
            },
            expCode: 401,
            privkey: privKeys[1]
        });
    });

    suite.test('Re-create token with valid privkey', function privKeyOk(t) {
        var tk = mod_jsprim.deepCopy(TOKENS[0]);
        mod_token.create(t, {
            params: tk,
            exp: tk,
            privkey: privKeys[0]
        });
    });

    suite.test('Get token', function tGetToken(t) {
        var tok = TOKENS[0];

        mod_token.get(t, {
            params: {
                guid: tok.guid
            },
            exp: {
                guid: tok.guid,
                serial: tok.serial,
                cn_uuid: tok.cn_uuid,
                model: tok.model,
                pubkeys: tok.pubkeys
            },
            fillIn: ['recovery_tokens']
        });
    });


    suite.test('Get token with pin requires auth', function tGetTkPinAuth(t) {
        var tok = TOKENS[0];

        mod_token.getPin(t, {
            params: {
                guid: tok.guid
            },
            expErr: {
                code: 'InvalidCredentials',
                message: 'You must make authenticated requests to use KBMAPI'
            },
            expCode: 401
        });
    });

    suite.test('Get token with pin', function tGetTokenPin(t) {
        var tok = TOKENS[1];

        mod_token.getPin(t, {
            params: {
                guid: tok.guid
            },
            privkey: privKeys[1],
            pubkey: TOKENS[1].pubkeys['9e'],
            exp: tok
        }, function getPinCb(_err, token, _res) {
            t.ok(token.recovery_tokens[0].token, 'Recover token');
            RECOVERY_TOKEN = token.recovery_tokens[0].token;
            t.end();
        });
    });

    suite.test('List tokens', function tListTokens(t) {
        var tokens = mod_jsprim.deepCopy(TOKENS);

        tokens.forEach(function stripPin(tok) {
            delete tok.pin;
        });

        mod_token.list(t, {
            params: {},
            deepEqual: true,
            present: tokens
            });
    });

    suite.test('Delete token requires auth', function tDelTkAuthRequired(t) {
        mod_token.delete(t, {
            params: TOKENS[0],
            expErr: {
                code: 'InvalidCredentials',
                message: 'You must make authenticated requests to use KBMAPI'
            },
            expCode: 401
        });
    });

    suite.test('Delete token', function tDeleteToken(t) {
        mod_token.delete(t, {
            params: TOKENS[0],
            privkey: privKeys[0],
            exp: {}
        });
    });

    suite.test('Lookup deleted token', function tGetDeletedToken(t) {
        mod_token.get(t, {
            params: {
                guid: TOKENS[0].guid
            },
            expCode: 404,
            expErr: {
                code: 'ResourceNotFound',
                message: 'piv tokens not found'
            }
        });
    });

    suite.test('pivy-tool', function pivyCb(t) {
        var res;
        const cp = require('child_process');
        try {
            res = cp.execSync('which pivy-tool');
        } catch (error) {
            console.log(error);
            t.comment('Skipping tests b/c `which pivy-tool` cmd failed');
            t.end();
            return;
        }

        const pivytool = res.toString().trim();
        const _9ecmd = util.format('%s pubkey 9e', pivytool);
        try {
            res = cp.execSync(_9ecmd);
        } catch (err2) {
            console.log(err2);
            t.comment('Skipping tests b/c ' + _9ecmd + ' failed');
            t.end();
            return;
        }

        const pubkey = res.toString().trim();
        var tk = mod_jsprim.deepCopy(TOKENS[0]);
        tk.guid = '0F4FE4B9EF0C46FC89DA79B38A61A1A1';
        tk.cn_uuid = '00000000-0000-0000-0000-000000000003';
        tk.pubkeys['9e'] = pubkey;
        delete tk.recovery_tokens;

        CLIENT.createToken({
            guid: tk.guid,
            token: tk,
            pivytool: pivytool
        }, function createTkCb(err, body, response) {
            t.ifError(err, 'create token err');
            t.equal(response.statusCode, 201, 'create token response code');
            t.ok(body, 'create token body');
            delete body.recovery_tokens;
            t.deepEqual(body, tk, 'body expected to be equal to given token');

            CLIENT.createToken({
                guid: tk.guid,
                token: tk,
                pivytool: pivytool
            }, function reCreateTkCb(err2, body2, response2) {
                t.ifError(err2, 'create token pivy signed err');
                t.ok(body2.recovery_tokens, 'missing recovery_tokens');
                tk.recovery_tokens = body2.recovery_tokens;
                t.deepEqual(body2, tk, 'body  expected to be equal to token');
                t.equal(response2.statusCode, 200, 'create token resp code');
                t.end();
            });
        });
    });

    suite.test('recovery token needs HMAC auth', function recoveryToken401(t) {
        mod_token.recover(t, {
            params: {
                guid: TOKENS[1].guid,
                recovery_token: crypto.randomBytes(40).toString('hex'),
                token: OTHER_TOKEN
            },
            expErr: {
                code: 'InvalidCredentials',
                message: 'Invalid authorization credentials supplied'
            },
            expCode: 401
        });
    });

    suite.test('recovery token', function recoveryToken(t) {
        mod_token.recover(t, {
            params: {
                guid: TOKENS[1].guid,
                recovery_token: RECOVERY_TOKEN,
                token: OTHER_TOKEN
            },
            exp: OTHER_TOKEN
        });
    });
});

test('Stop server', function closeServers(t) {
    KBMAPI.server.close();
    mod_server.close(t);
});

// vim: set softtabstop=4 shiftwidth=4:
