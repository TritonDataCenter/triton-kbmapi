/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

/*
 * Copyright 2017, Joyent, Inc.
 */

/*
 * Unit tests for token endpoints
 */

'use strict';

var h = require('./helpers');
var mod_token = require('../lib/token');
var mod_server = require('../lib/server');
var test = require('tape');

var KBMAPI;
var MORAY;

// Values here were generated by reading /dev/random. Any resemblance to
// actual tokens, living or dead, is purely coincidential.
var TOKENS = {
    'DDA81AA0DB3528479AB6D2AC75624E5E': {
        pin: '12345',
        serial: 'abcd12345',
        model: 'ACME insta-token model 1',
        cn_uuid: '00000000-0000-0000-0000-000000000001'
    },
    '75CA077A14C5E45037D7A0740D5602A5': {
        pin: '54321',
        serial: 'deadbeef123',
        model: 'ACME insta-token model 1',
        cn_uuid: '00000000-0000-0000-0000-000000000002'
    }
};

test('Initial setup', function tInitialSetup(t) {
	h.reset();

	t.test('Create client and server', function tCreateClientServer(t2) {
        h.createClientAndServer(function (err, res, moray) {
            KBMAPI = res;
            MORAY = moray;
			t2.ifError(err, 'server creation');
			t2.ok(KBMAPI, 'client');
			t2.ok(MORAY, 'moray');
            t2.end();
		});
    });

    t.test('Create tokens', function tCreateTokens(t2) {
        Object.keys(TOKENS).forEach(function eachToken(guid) {
            var token = {
                guid: guid,
                pin: TOKENS[guid].pin,
                serial: TOKENS[guid].serial,
                cn_uuid: TOKENS[guid].cn_uuid,
                model: TOKENS[guid].model
            };
            t2.test('Create token GUID ' + guid, function doCreate(t3) {
                mod_token.create(t3, {
                    params: token,
                    exp: token
                });
            });
        });
        t2.end();
    });

    t.test('Get token', function tGetToken(t2) {
        var guid = 'DDA81AA0DB3528479AB6D2AC75624E5E';
        var tok = TOKENS[guid];

        mod_token.get(t2, {
            params: {
                guid: guid
            },
            exp: {
                guid: guid,
                serial: tok.serial,
                cn_uuid: tok.cn_uuid,
                model: tok.model
            }
        });
    });

    t.test('Get token with pin', function tGetTokenPin(t2) {
        var guid = 'DDA81AA0DB3528479AB6D2AC75624E5E';
        var tok = TOKENS[guid];
        tok.guid = guid;

        mod_token.getPin(t2, {
            params: {
                guid: guid
            },
            exp: tok
        });
    });
});

test('Stop server', mod_server.close);
